# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/root/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
echo "Activating conda via bash"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/root/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/root/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/root/anaconda3/bin/:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
echo "Activating pangolin"
conda activate pangolin
#start script
FASTA=$1 #reference genome
FASTQ1=$2 #foward reads
FASTQ2=$3 #reverse reads
PREFIXOUT=$4 #prefix for output
THREADS=$5 #number of threads
DEPTH=$6 #minum depth to mask regions
MIN_LEN=$7 #minimum length to trimm reads
ADAPTERS=$8 #fasta file with adapters
#================================================================
# WORKFLOW
#================================================================
#Creating index of reference genome
python ./python_scripts/bwa_index.py -in $FASTA
#Creating directory to store results
mkdir $PREFIXOUT.results
cd $PREFIXOUT.results
#QUALITY CHECK
echo "FASTP:" > $PREFIXOUT.time.txt
start=$(date +%s%3N)
python ../python_scripts/fastp.py -f1 $FASTQ1 -f2 $FASTQ2 -pr $PREFIXOUT -mi $MIN_LEN -p $THREADS -a $ADAPTERS
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
#MAPPING
echo "BWA and ivar:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)
python ../python_scripts/bwa_mem.py -f $FASTA -pr $PREFIXOUT -p $THREADS 
#GENERATING CONSENSUS WITH MAJOR ALLELE FREQUENCIES
python ../python_scripts/ivar.py -f $FASTA -pr $PREFIXOUT -dp $DEPTH
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
##GET PUTATIVE MINOR VARIANTS STEP
echo "Minor Variant Analysis:" >> $PREFIXOUT.time.txt
python ../python_scripts/get_mvs.py -f $FASTA -pr $PREFIXOUT -dp $DEPTH -p $THREADS
##GET LINEAGE AND MUTATION PROFILE
python ../python_scripts/pango_nextclade.py -pr $PREFIXOUT -dp $DEPTH -p $THREADS
##GET ASSEMBLY METRICS
python ../python_scripts/assembly_metrics.py -pr $PREFIXOUT
end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
cd ..
