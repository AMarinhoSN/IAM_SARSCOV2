#================================================================
# HEADER
#================================================================
#% USAGE
#+    bash sars2_assembly_singularity_run reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa
#%
#% DESCRIPTION
#%    This script performs a reference guided genome assembly of SARS-CoV-2 using singularity. Python scripts were developed based on the wuhan SARS-CoV-2 reference genome NC_045512.2.
#%    The workflow was developed to work with Illumina paired-end reads. Tests with other technologies should be performed.
#%
#% OPTIONS
#%    <REFERENCEGENOME>    -   Fasta file with reference genome
#%    <001.fastq.gz>       -   Fasqt file with positive sense reads (R1)
#%    <002.fastq.gz>       -   Fastq file with negative sense reads (R2)
#%    <PREFIX>             -   Prefix string to store results and to rename consensus genome
#%    <NUM_THREADS>        -   Number of threads
#%    <DEPTH>              -   Minimum depth to mask unanssembled regions
#%    <MIN_LEN>            -   Minimum length to trimm sequences
#%    <ADAPTERS>           -   Fasta file with adapters used in the sequencing analysis
#%
#% EXAMPLES
#%    $bash sars2_assembly reference.fasta code_R1.fastq.gz code_R2.fastq.gz prefix_name 8 5 75 adapters.fa
#%
#% DEPENDENCIES
#%  BWA Version: 0.7.17-r1188
#%  samtools 1.9 Using htslib 1.9
#%  fastp 0.20.1
#%  iVar version 1.3.1
#%  bam-readcount version: 0.8.0-unstable-7-625eea2
#%  Python 3.8.1
#%  mafft v7.310 (2017/Mar/17)
#%  nextclade 0.14.2
#%  pangolin v3.1.4
#%  bedtools v2.27.0
#%  bamdst 1.0.6
#%
#================================================================
#- IMPLEMENTATION
#-    version         $sars2_assembly 0.0.2
#-    authors         Filipe Dezordi and Gabriel Wallau
#-    maintainer      Filipe Dezordi (zimmer.filipe@gmail.com)
#-    username        dezordi
#-    license         GPL
#-    information     dezordi.github.io
#================================================================
#  HISTORY
#     2021/04/17 : dezordi : Script creation
#     2021/06/22 : dezordi : Update, improve indels recognition into intrahost variant analysis
#
#================================================================
# ACTIVATE CONDA AND PANGOLIN
#================================================================

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/root/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
echo "Activating conda via bash"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/root/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/root/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/root/miniconda3/bin/:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
echo "Activating pangolin"
conda activate pangolin

#================================================================
# ARGUMENTS
#================================================================

FASTA=$1 #reference genome
FASTQ1=$2 #foward reads
FASTQ2=$3 #reverse reads
PREFIXOUT=$4 #prefix for output
THREADS=$5 #number of threads
DEPTH=$6 #minum depth to mask regions
MIN_LEN=$7 #minimum length to trimm reads
ADAPTERS=$8 #fasta file with adapters

#================================================================
# WORKFLOW
#================================================================

#CREATING INDEX OF REFERENCE GENOME
python /app/IAM_SARSCOV2/python_scripts/bwa_index.py -in /data/$FASTA
#CREATING DIR TO STORE RESULTS
mkdir /data/$PREFIXOUT.results/
cd /data/$PREFIXOUT.results
#QUALITY CHECK
echo "fastp analysis:" > $PREFIXOUT.time.txt
start=$(date +%s%3N)
echo ''
echo '!! STEP 1 !!'
echo ''

python /app/IAM_SARSCOV2/python_scripts/fastp.py -f1 $FASTQ1 -f2 $FASTQ2 -pr $PREFIXOUT -mi $MIN_LEN -p $THREADS -a $ADAPTERS
echo '!! DONE !!'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

#MAPPING
echo ''
echo '!! STEP 2 !!'
echo ''

echo "BWA and iVar analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/IAM_SARSCOV2/python_scripts/bwa_mem.py -f /data/$FASTA -pr $PREFIXOUT -p $THREADS
python /app/IAM_SARSCOV2/python_scripts/ivar.py -f /data/$FASTA -pr $PREFIXOUT -dp $DEPTH
echo ''
echo '!! DONE !!'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

##GET PUTATIVE MINOR VARIANTS STEP
echo ''
echo '!! STEP 3 !!'
echo ''

echo "Minor variant analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/IAM_SARSCOV2/python_scripts/get_mvs_sing.py -f /data/$FASTA -pr $PREFIXOUT -dp $DEPTH -p $THREADS
echo ''
echo '!! DONE !!'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

##PANGOLIN AND NEXTCLADE
echo ''
echo '!! STEP 4 !!'
echo ''

echo "Nextclade and Pangolin analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/IAM_SARSCOV2/python_scripts/pango_nextclade.py -pr $PREFIXOUT -dp $DEPTH -p $THREADS
echo ''
echo '!! DONE !!'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt

##GET ASSEMBLY METRICS
echo ''
echo '!! STEP 5 !!'
echo ''

echo "bamdst analysis:" >> $PREFIXOUT.time.txt
start=$(date +%s%3N)


python /app/IAM_SARSCOV2/python_scripts/assembly_metrics.py -pr $PREFIXOUT

echo ''
echo '!! DONE !!'

end=$(date +%s%3N)
analysis_in_miliseconds=$(expr $end - $start)
analysis_in_minutes="$(($analysis_in_miliseconds / 60000)).$(($analysis_in_miliseconds % 60000))"
echo $analysis_in_minutes >> $PREFIXOUT.time.txt
cd ..
